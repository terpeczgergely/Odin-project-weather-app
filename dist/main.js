(()=>{const e=document.getElementById("weather-type"),t=document.getElementById("weather-location"),n=document.getElementById("weather-location-time"),o=document.getElementById("weather-degree"),a=document.getElementById("weather-degree-display"),r=document.getElementById("weather-type-icon"),c=document.getElementById("feelslike-degree"),d=document.getElementById("humidity-percentage"),i=document.getElementById("wind-direction-value"),m=document.getElementById("wind-speed-value"),s=document.getElementById("search-location"),y=document.getElementById("error");let l="Budapest",u=!0;const h="81dee91ab1544b219b0214517240503";async function p(){try{const s=await fetch(`https://api.weatherapi.com/v1/current.json?key=${h}&q=${l}`,{method:"GET",mode:"cors",headers:{"Content-Type":"application/json"}});if(!l)throw new Error("No location specified");if(!s.ok)throw y.innerHTML="Location was not found!",new Error("Network response was not ok");const p=await s.json();let f=p.current.condition.text;return e.innerHTML=f,t.innerHTML=`${p.location.name}, ${p.location.country}`,n.innerHTML=`${p.location.localtime}`,u?(o.innerHTML=`${p.current.temp_c} C°`,a.innerHTML="Displaying temperature in C° <br> (click on degree to change)",c.innerHTML=`${p.current.feelslike_c} C°`):(o.innerHTML=`${p.current.temp_f} F°`,a.innerHTML="Displaying temperature in F° <br> (click on degree to change)",c.innerHTML=`${p.current.feelslike_f} F°`),r.src=`https:${p.current.condition.icon}`,r.alt=f,d.innerHTML=`${p.current.humidity} %`,i.innerHTML=`${p.current.wind_dir} `,m.innerHTML=`${p.current.wind_kph} km/h`,p}catch(e){throw console.error("There was a problem with the fetch operation:",e),e}}async function f(){try{const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${h}&q=${l}&days=7`,{method:"GET",mode:"cors",headers:{"Content-Type":"application/json"}}),n=await t.json();console.log(n);for(let t=0;t<7;t++){document.getElementById(`dayName${t}`).innerHTML=(e=n.forecast.forecastday[t].date,["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][new Date(e).getDay()]);const o=document.getElementById(`dayMaxTemp${t}`),a=document.getElementById(`dayMinTemp${t}`),r=document.getElementById(`dayWeatherTypeImg${t}`);r.src=`https:${n.forecast.forecastday[t].day.condition.icon}`,r.alt=n.forecast.forecastday[t].day.condition.text,u?(o.innerHTML=` ${n.forecast.forecastday[t].day.maxtemp_c} C° max `,a.innerHTML=` ${n.forecast.forecastday[t].day.mintemp_c} C° min `):(o.innerHTML=` ${n.forecast.forecastday[t].day.maxtemp_f} F° max `,a.innerHTML=` ${n.forecast.forecastday[t].day.mintemp_f} F min `)}return n}catch(e){throw console.error("There was a problem with the fetch operation:",e),e}var e}s.addEventListener("blur",(function(){l=this.value,function(e){return!!e}(l)?(y.innerHTML="",p(),f()):(y.innerHTML="Location was not provided!",console.log("Failed to fetch weather, because location is missing"))})),p(),async function(){const e=document.getElementById("weather-data-weekly");for(let t=0;t<7;t++){const n=document.createElement("div"),o=document.createElement("h2"),a=document.createElement("h1"),r=document.createElement("h4"),c=document.createElement("img");o.id=`dayName${t}`,n.id=`day${t}`,a.id=`dayMaxTemp${t}`,r.id=`dayMinTemp${t}`,c.id=`dayWeatherTypeImg${t}`,n.append(o,a,r,c),e.appendChild(n)}}(),f(),o.addEventListener("click",(()=>{u=!u,p(),f()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,